/*
 * Mohammad Juma
 * 
 * TCSS 305 - Autumn 2012
 * Assignment 3 - SnapShop
 * October 13, 2012
 */

package snapshop.gui;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import snapshop.filters.EdgeDetectFilter;
import snapshop.filters.EdgeHighlightFilter;
import snapshop.filters.Filter;
import snapshop.filters.FlipHorizontalFilter;
import snapshop.filters.FlipVerticalFilter;
import snapshop.filters.GrayscaleFilter;
import snapshop.filters.SharpenFilter;
import snapshop.filters.SoftenFilter;
import snapshop.image.PixelImage;

/**
 * Creates the frame for the SnapShop program.
 * 
 * @author Mohammad Juma
 * @version 10-13-12
 */
public class SnapShopFrame extends JFrame
{
  /** 
   * The Serialization ID.
   */
  private static final long serialVersionUID = 0;  
  
  /**
   * The directory this program is run from.
   */
  private static final File CURRENT_DIRECTORY = new File(".");
  
  /**
   * Filter Button names.
   */
  private static final String[] FILTERS = new String[] {
    "Edge Detect", "Edge Highlight", "Flip Horizontal",
    "Flip Vertical", "Grayscale", "Sharpen", "Soften"};
  
  /**
   * File chooser for opening and saving files.
   */
  private final JFileChooser my_chooser = new JFileChooser();

  /**
   * Open File Button.
   */
  private final JButton my_open_button = new JButton("Open...");
  
  /**
   * Save File Button.
   */
  private final JButton my_save_button = new JButton("Save As...");
  
  /**
   * JLabel for holding the image.
   */
  private final JLabel my_label = new JLabel();
  
  /**
   * List of Buttons for holding the different filters.
   */
  private final List<JButton> my_filter_buttons = new ArrayList<JButton>();
  
  /**
   * PixelImage object creates ImageIcons.
   */
  private PixelImage my_image;

  /**
   * Filter object.
   */
  private Filter my_filter;

  /**
   * SnapShopFrame constructor, creates the initial frame for the program.
   */
  public SnapShopFrame()
  {
    super("TCSS 305 SnapShop");
    my_chooser.setCurrentDirectory(CURRENT_DIRECTORY);
  }
  
  /**
   * Starts the GUI.
   */
  public void start()
  {    
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    add(filtersPanel(), BorderLayout.NORTH);
    add(imagePanel(), BorderLayout.CENTER);
    add(fileOptionsPanel(), BorderLayout.SOUTH);
    pack();
    setVisible(true);
  }
  
  /**
   * Creates the filter buttons panel.
   * 
   * @return panel
   */
  private JPanel filtersPanel()
  {
    final JPanel panel = new JPanel();
    panel.setLayout(new FlowLayout());
    
    for (int i = 0; i < FILTERS.length; i++)
    {
      final int j = i;
      my_filter_buttons.add(new JButton(FILTERS[i]));
      my_filter_buttons.get(i).setEnabled(false);
      my_filter_buttons.get(i).addActionListener(new ActionListener()
      {
        public void actionPerformed(final ActionEvent the_event)
        {
          applyFilter(my_filter_buttons.get(j).getText());
        }
      });
      panel.add(my_filter_buttons.get(i));
    }
    
    return panel;
  }
  
  /**
   * Creates the image panel.
   * 
   * @return panel
   */
  private JPanel imagePanel()
  {
    final JPanel panel = new JPanel();
    panel.add(my_label);
    return panel;
  }
  
  /**
   * Creates the open and save buttons panel.
   * 
   * @return panel
   */
  private JPanel fileOptionsPanel()
  {
    final JPanel panel = new JPanel();
    panel.setLayout(new FlowLayout());
    
    my_open_button.addActionListener(new ActionListener()
    {
      public void actionPerformed(final ActionEvent the_event)
      {
        try
        {
          openFile();
        }
        catch (final IOException e)
        {
          // TODO
          JOptionPane.showMessageDialog(null, e.getMessage());
        }
      }
    });
    panel.add(my_open_button);
    
    my_save_button.addActionListener(new ActionListener()
    {
      public void actionPerformed(final ActionEvent the_event)
      {
        saveFile();
      }
    });
    my_save_button.setEnabled(false);
    panel.add(my_save_button);
    
    return panel;
  }
  
  /**
   * Opens a given file and checks to make sure its valid.
   * @throws IOException 
   */
  private void openFile() throws IOException
  {
    final int return_state = my_chooser.showOpenDialog(super.getContentPane());
    if (return_state == JFileChooser.APPROVE_OPTION)
    {
      my_chooser.setCurrentDirectory(my_chooser.getCurrentDirectory());
      try
      {
        my_image = PixelImage.load(my_chooser.getSelectedFile());
        my_label.setIcon(new ImageIcon(my_image));
        for (int i = 0; i < FILTERS.length; i++)
        {
          my_filter_buttons.get(i).setEnabled(true);
        }
        my_save_button.setEnabled(true);
        pack();
      }
      catch (final IOException e)
      {
        JOptionPane.showMessageDialog(null, e.getMessage());
      }
    }
  }
  
  /**
   * Save the PixelImage to a file.
   */
  private void saveFile()
  {
    final int return_state = my_chooser.showSaveDialog(super.getContentPane());
    if (return_state == JFileChooser.APPROVE_OPTION)
    {
      my_chooser.setCurrentDirectory(my_chooser.getCurrentDirectory());
      try
      {
        my_image.save(my_chooser.getSelectedFile());
      }
      catch (final IOException e)
      {
        JOptionPane.showMessageDialog(null, e.getMessage());
      }
    }
  }
  
  /**
   * Applies the selected method.
   * 
   * @param the_filter The filter to apply.
   */
  private void applyFilter(final String the_filter)
  {
    if (FILTERS[0].equals(the_filter))
    {
      my_filter = new EdgeDetectFilter();
      my_filter.filter(my_image);
      my_label.setIcon(new ImageIcon(my_image));
    }
    else if (FILTERS[1].equals(the_filter))
    {
      my_filter = new EdgeHighlightFilter();
      my_filter.filter(my_image);
      my_label.setIcon(new ImageIcon(my_image));
    }
    else if (FILTERS[2].equals(the_filter))
    {
      my_filter = new FlipHorizontalFilter();
      my_filter.filter(my_image);
      my_label.setIcon(new ImageIcon(my_image));
    }
    else if (FILTERS[3].equals(the_filter))
    {
      my_filter = new FlipVerticalFilter();
      my_filter.filter(my_image);
      my_label.setIcon(new ImageIcon(my_image));
    }
    else if (FILTERS[4].equals(the_filter))
    {
      my_filter = new GrayscaleFilter();
      my_filter.filter(my_image);
      my_label.setIcon(new ImageIcon(my_image));
    }
    else if (FILTERS[5].equals(the_filter))
    {
      my_filter = new SharpenFilter();
      my_filter.filter(my_image);
      my_label.setIcon(new ImageIcon(my_image));
    }
    else if (FILTERS[6].equals(the_filter))
    {
      my_filter = new SoftenFilter();
      my_filter.filter(my_image);
      my_label.setIcon(new ImageIcon(my_image));
    }
  }
}
